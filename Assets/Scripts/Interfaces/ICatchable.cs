using UnityEngine;
using System;
using System.Collections;

public interface ICatchable : IActionable {

	float Weight {
		get;
	}

    int Price
    {
        get;
    }

	GameObject GameObject {
		get;
	}

	string Name {
		get;
	}
		
	void ChangeWeight (float ratio = 1.0f); // 1.0f - исходный вес, 0.75f - уменьшить вес, 1.25f - увеличить вес
	void ChangePrice (float ratio = 1.0f);
	void ChangeSpeed (float ratio = 1.0f);

	ISea Sea {	// Каждый предмет в море должен быть осведомлен о море, в котором он находится
		get;
		set;
	}

	void Destroy();	// Приводит к удалению объекта (объект сам должен оповестить своего "создателя", например море, о своем удалении)

	ICatchable WhenCatched (IHook hook);		// Должен, вызываться когда объект был пойман (рыба может останавливать движение, мина - взрываться и т.п.). 
												// IHook - крючок, на который поймана рыба.
												// Возвращает тип ICatchable, который и будет пойман. Зачастую это и есть сам объект. Но иногода это может быть другой объект
												// например в случае сундука, возвращаться будет некий другой объект.
												// в случае динамита, возвращаться может нулевой указатель null. 
												// Вышестоящие объекты должны обработать это соостветсвенно.
												
	void Use(IFisher fisher);	 // Поскольку Catchable инетрактивный объект, то после того, как объект был использован (помещен в лодку, использован как бонус и т.п.) должна вызываться функция
								 // по сути показывающая, что объект выполнил свою задачу, и в соответсвии с этим может выполнить необходимый в этом случае ему алгоритм.
	event Action<ICatchable> OnUsed;

}
